#!/usr/bin/env python2

# Run this script like so:
#
#  jhbuild -m gnome-world sysdeps --dump-all `jhbuild -m gnome-world list -a` | ./update-freebsd-sysdeps.py ../data/freebsd-sysdeps.py

import subprocess
import sys
import os

c_include_paths = ['/usr/local/include', '/usr/include']
pkgconfig_paths = ['/usr/local/lib/pkgconfig', '/usr/local/libdata/pkgconfig', '/usr/libdata/pkgconfig']
path_paths = ['/usr/local/bin', '/usr/local/sbin', '/usr/bin', '/usr/sbin', '/bin', '/sbin']
python2_paths = ['/usr/local/lib/python2.7/site-packages']

hints = {
    'xml:http://docbook.sourceforge.net/release/xsl/current/':            'docbook-xsl',
    '': ''
}

ignore = set([
    'c_include:libdevmapper.h',
    'c_include:pppd/pppd.h',
    'c_include:wireless.h',
    'path:iptables',

    'pkgconfig:ply-boot-client',
    'pkgconfig:wayland-egl',
    'pkgconfig:bluez', 'pkgconfig:sbc',

    'pkgconfig:lttng-ust',

    'pkgconfig:libsystemd', 'pkgconfig:libsystemd-daemon',
    'pkgconfig:libsystemd-journal', 'pkgconfig:libsystemd-login',

    'pkgconfig:gudev-1.0', 'pkgconfig:libudev', 'pkgconfig:libatasmart',
    'pkgconfig:libnl-3.0', 'pkgconfig:libnl-genl-3.0', 'pkgconfig:libnl-route-3.0',
    'pkgconfig:mtdev', 'pkgconfig:libndp'
])

def add_paths(mapping, key, prefixes, name):
    for p in prefixes:
        filename = p + '/' + name
        mapping[filename] = key

def collect_depends(fp):
    filemap = {}

    for line in fp:
        line = line.strip()
        reqtype, _, name = line.partition(':')

        if reqtype == 'path':
            add_paths(filemap, line, path_paths, name)

        elif reqtype =='c_include':
            add_paths(filemap, line, c_include_paths, name)

        elif reqtype == 'pkgconfig':
            add_paths(filemap, line, pkgconfig_paths, name + '.pc')

        elif reqtype == 'python2':
            add_paths(filemap, line, python2_paths, name + '/__init__.py')
            add_paths(filemap, line, python2_paths, name + '.py')

        else:
            filemap[line] = line

    return filemap

def find_pkgs(filemap, log = sys.stderr):
    result = {}

    for filename in filemap:
        if os.path.exists(filename):
            key = filemap[filename]

            if filename.startswith('/usr/local'):
                assert key not in result or not result[key]
                output = subprocess.check_output(['pkg', 'which', filename])
                assert ' installed by package ' in output
                package = output.split()[-1]
                name, _, version = package.rpartition('-')
                assert name
                result[key] = name
            else:
                if key not in result:
                    result[key] = ''

    for key in sorted(set(filemap.itervalues())):
        if key not in result:
            if key in hints:
                result[key] = hints[key]
            elif key not in ignore:
                log.write("# warning: unable to locate dependency '{}'\n".format(key))

    return result

def generate_file(outfile, infile, log = sys.stderr):
    outfile.write('# this file was generated by scripts/update-freebsd-sysdeps.py\n\n')

    filemap = collect_depends(infile)
    result = find_pkgs(filemap, log)

    outfile.write('\n')
    outfile.write('{\n')
    for key in sorted(result):
        outfile.write('    {!r}: {!r},\n'.format(key, result[key]))
    outfile.write("    '': []\n")
    outfile.write('}\n')

if __name__ == '__main__':
    if len(sys.argv) != 2:
        sys.stderr.write("this script must be run with a single argument: the name of the output file\n")
        sys.exit(1)

    output = open(sys.argv[1], 'w')
    generate_file(output, sys.stdin, log = output)
    output.close()
